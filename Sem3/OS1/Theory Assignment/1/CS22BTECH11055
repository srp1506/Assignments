THEORY ASSIGNMENT - 1;
CS3510 - Operating Systems - 1;


1) Question 1.14 from the Book:



(a) What is the purpose of interrupts? - 
	
	Interrupts are signals that halt execution of the current program and loads the instructions at a specific location that pertain to the interrupt service routine. Once the interrupt service routine resolves the interrupt, the CPU resumes execution of the interrupted program.
	
	Their purpose is as follows : 
	i) Used by device controllers to inform the CPU that is has finished its operation. 
	ii) Interrupts help in multitasking i.e when a program is executing an I/O operation the CPU may begin execution of another program. It will resume the former program when it receives an interrupt from the former.
	iii) Allows the system to promptly react to sensitive events(eg. Division by 0, etc).
	
(b) How does an interrupt differ from a trap? - 
	
	Both are mechanisms to alter the normal flow of the program execution and handle specific events. However they differ in origin and purpose :
	i) Origin : 
		Interrupts : External events, often generated by hardware trigger interrupts. These events are asynchronous i.e occur independently of the flow of the normal flow of the program.
		Traps : Synchronous i.e tied to the execution of specific instructions in the program.
	ii) Purpose :
		Interrupts : Handle events external to the CPU, such as I/O operations or hardware generated signals. They allow the CPU to suspend the current task and handle the external event.
		Traps : Handle exceptional conditions within the program, such as
division by 0, accessing invalid memory, or executing privileged instructions.

(c) Can traps be generated intentionally by a user program? (d) If so, for what purpose? - 

	Yes, traps can be generated intentionally by the user for varying purposes. Such intentional interrupts are called "software interrupts" or "software exceptions". Some common purposes include : 
	
	i) System calls : User programs often need to request services from the OS, such as file I/O, or memory allocation.
	ii) Error Handling : users may intentionally generate traps to handle specific error conditions. Eg. Exception handling routine in JAVA.
	iii) Debugging : During development it is common practice to intentionally insert traps to pause program at specific locations and check the programs' robustness.



2) Question 1.16 from the Book: Direct memory access is used for high-speed I/O devices in order to avoid increasing the CPU â€™s execution load.



(a) How does the CPU interface with the device to coordinate the transfer? - 

	Interaction between the CPU and a device involves a set of operations that allow the CPU to communicate with and control the device. This is typically managed by the device controller of driver i.e an intermediary between the CPU and the hardware device.
	
(b) How does the CPU know when the memory operations are complete? - 
	
	When an external device completes its memory operations it informs the CPU via interrupts. 
	
(c) The CPU is allowed to execute other programs while the DMA controller is transferring data. Does this process interfere with the execution of the user programs? If so, describe what forms of interference are caused. - 
	
	DMA can operate independently of the CPU and can access system memory without CPU intervention. This allows the CPU to execute other programs concurrently, albeit there are potential forms of interfernce that can occur, depending on the architecture and DMA-CPU interaction. For eg.
	i) Bandwidth Competition : DMA controller and CPU share the system's memory bus leading to bandwidth contention in case of simultaneous access. This can lead to delay for both.
	ii) Cache interference : Most CPUs nowadays have multiple levels of cache. If DMA directly writes to memory, it may not upadate the caches, leading to cache coherency issues.
	iii) Synchronization and Ordering : DMA transfers can affect the order in which data is written to the memory. This may be problematic if user program relies of speceific order of data updates.
	iv) Contention for System Resources : DMA controller may contend with the CPU for other system resources such as the memory controller or peripheral buses leading to increased latency for both.
